curve(dnorm,-4,4,axes=F,xlab="Z",ylab="")
lines(A,c(0,0),lwd=2,col=4)
if (H1 == "\\neq") {
lines(R1,c(0,0),lwd=2,col=2)
axis(1,c(-4,-tc,0,tc,4),round(c(-4,-tc,0,tc,4),3))
} else axis(1,round(c(-4,4,0,tc),3))
lines(R,c(0,0),lwd=2,col=2)
points(tobs,0,pch=4,cex=2)
text(tobs,.05,expression(z[obs]))
if (H1 == ">") {pval <- paste("P(Z>z_{\\text{obs}})=P(Z>",round(tobs,2),")=",format(1-pnorm(tobs),digits = 4,scipen=8))}
if (H1 == "<") {pval <- paste("P(Z<z_{\\text{obs}})=P(Z<",round(tobs,2),")=",format(pnorm(tobs),digits = 4,scipen=8))}
if (H1 == "\\neq") {pval <- paste("P(|Z|>|z_{\\text{obs}}|)=2P(Z>|z_{\\text{obs}}|)=2P(Z>|",round(tobs,2),"|)=",format(2*pnorm(-abs(round(tobs,2))),digits = 4,scipen=8))}
c4 <- paste("Il $p_{\\text{value}}$ è $$",pval,"$$")
return(paste(c0,c1,c2,c3,c4,sep = "\n\n"))
}
cat(ztest_mu(12,10,1.2,10,h1 = h1))
ztest_mu <- function(muh,mu0,s,n,h1,alpha=0.05){
se <- s/sqrt(n)
tobs <- round((muh-mu0)/se,4)
if (h1==">") tc <- qnorm(1-alpha)
if (h1=="<") tc <- -qnorm(1-alpha)
if (h1=="\\neq") tc <- sign((muh-mu0))*qnorm(1-alpha/2)
if (h1=="\\neq") alpha <- alpha/2
if (!exists("um")) um <- ""
c0 <- paste("
$\\fbox{A}$ FORMULAZIONE DELLE IPOTESI
$$\\begin{cases}
H_0:\\mu=\\mu_0=",mu0,"\\text{",um,"}\\\\
H_1:\\mu",h1," \\mu_0=",mu0,"\\text{",um,"}
\\end{cases}$$",
ifelse(h1=="\\\\neq","Siccome $H_1$ è bilaterale, considereremo $\\\\alpha/2$, anziché $\\\\alpha$",""),
"\n\n $\\fbox{B}$ SCELTA E CALCOLO STATISTICA-TEST, $Z$
$\\sigma^{2}$ di $\\cal{P}$ è nota: $\\Rightarrow$ z-Test.
\\begin{eqnarray*}
\\frac{\\hat\\mu - \\mu_{0}} {\\sigma/\\sqrt{n}}&\\sim&N(0,1)\\\\
z_{\\text{obs}}
&=& \\frac{ (",muh,"- ",mu0,")} {",s,"/\\sqrt{",n,"}}
=  ",tobs,"\\, .
\\end{eqnarray*}"
)
tc <- round(tc,4)
H1 <- h1
if (h1=='\\neq') h1 <- ifelse(tc<0,"<",">")
c1 <- paste("$\\fbox{C}$ DECISIONE
Dalle tavole si ha $z_{",alpha,"} = ",tc,"$.
$$z_{\\text{obs}} = ",tobs,ifelse(tobs<tc,"<",">"), "z_{",alpha,"} = ",tc,"$$ ")
c2 <- paste("CONCLUSIONE: i dati",ifelse(tobs<tc & h1=="<" | tobs>tc & h1==">", " **non** sono", "**sono**")," coerenti con $H_{0}$ al LdS del ", ifelse(H1=="\\neq",2*alpha*100,alpha*100),"%")
c3 <- "**Graficamente**"
if (H1 == ">") {R <- c(tc,4); A <- c(-4,tc)}
if (H1 == "<") {R <- c(-4,tc); A <- c(tc,4)}
if (H1 == "\\neq") {A <- c(-abs(tc),abs(tc)); R1 <- c(-4,-abs(tc)); R <- c(4,abs(tc))}
curve(dnorm,-4,4,axes=F,xlab="Z",ylab="")
lines(A,c(0,0),lwd=2,col=4)
if (H1 == "\\neq") {
lines(R1,c(0,0),lwd=2,col=2)
axis(1,c(-4,-tc,0,tc,4),round(c(-4,-tc,0,tc,4),3))
} else axis(1,round(c(-4,4,0,tc),3))
lines(R,c(0,0),lwd=2,col=2)
points(tobs,0,pch=4,cex=2)
text(tobs,.05,expression(z[obs]))
if (H1 == ">") {pval <- paste("P(Z>z_{\\text{obs}})=P(Z>",round(tobs,2),")=",format(1-pnorm(tobs),digits = 4,scipen=8))}
if (H1 == "<") {pval <- paste("P(Z<z_{\\text{obs}})=P(Z<",round(tobs,2),")=",format(pnorm(tobs),digits = 4,scipen=8))}
if (H1 == "\\neq") {pval <- paste("P(|Z|>|z_{\\text{obs}}|)=2P(Z>|z_{\\text{obs}}|)=2P(Z>|",round(tobs,2),"|)=",format(2*pnorm(-abs(round(tobs,2))),digits = 4,scipen=8))}
c4 <- paste("Il $p_{\\text{value}}$ è $$",pval,"$$")
return(paste(c0,c1,c2,c3,c4,sep = "\n\n"))
}
cat(ztest_mu(12,10,1.2,10,h1 = h1))
withMathJax(paste(ztest_mu(muh,mu0,s,n,h1)))
runApp()
runApp()
runApp()
runApp()
runApp()
source(ztest.R)
source("ztest.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/OneDrive/Stat/App/prob')
runApp()
runApp()
runApp('~/OneDrive/Stat/App/prob')
runApp()
source("~/OneDrive/Stat/Test/ztest.R")
ztest_mu(muh,mu0,s,n,"\\neq")
cat(ztest_mu(muh,mu0,s,n,"\\neq"))
sign((muh-mu0))*qnorm(1-alpha/2)
h1
source("~/OneDrive/Stat/Test/ztest.R")
runApp()
h1 <- "\\neq"
se <- s/sqrt(n)
tobs <- round((muh-mu0)/se,4)
if (h1==">") tc <- qnorm(1-alpha)
if (h1=="<") tc <- -qnorm(1-alpha)
if (h1=="\\neq") tc <- sign((muh-mu0))*qnorm(1-alpha/2)
tc
if (h1=="\\neq") alpha <- alpha/2
if (!exists("um")) um <- ""
c0 <- paste("
\\(\\fbox{A}\\) FORMULAZIONE DELLE IPOTESI
$$\\begin{cases}
H_0:\\mu=\\mu_0=",mu0,"\\text{",um,"}\\\\
H_1:\\mu",h1," \\mu_0=",mu0,"\\text{",um,"}
\\end{cases}$$",
ifelse(h1=="\\neq","Siccome \\(H_1\\) è bilaterale, considereremo \\(\\alpha/2\\), anziché \\(\\alpha\\) $$ $$",""),
"\n\n \\(\\fbox{B}\\) SCELTA E CALCOLO STATISTICA-TEST, \\(Z\\)
\\(\\sigma^{2}\\) di \\(\\cal{P}\\) è nota: \\(\\Rightarrow\\) z-Test.
\\begin{eqnarray*}
\\frac{\\hat\\mu - \\mu_{0}} {\\sigma/\\sqrt{n}}&\\sim&N(0,1)\\\\
z_{\\text{obs}}
&=& \\frac{ (",muh,"- ",mu0,")} {",s,"/\\sqrt{",n,"}}
=  ",tobs,"\\, .
\\end{eqnarray*}"
)
c0
tc <- round(tc,4)
H1 <- h1
tc
H1 <- h1
if (h1=='\\neq') h1 <- ifelse(tc<0,"<",">")
c1 <- paste("\\(\\fbox{C}\\) DECISIONE
Dalle tavole si ha \\(z_{",alpha,"} = ",tc,"\\).
$$z_{\\text{obs}} = ",tobs,ifelse(tobs<tc,"<",">"), "z_{",alpha,"} = ",tc,"$$ ")
c1
select.list(sort(.packages(all.available = TRUE)))
c1
runApp()
runApp()
se <- s/sqrt(n)
tobs <- round((muh-mu0)/se,4)
if (h1==">") tc <- qnorm(1-alpha)
if (h1=="<") tc <- -qnorm(1-alpha)
if (h1=="\\neq") tc <- sign((muh-mu0))*qnorm(1-alpha/2)
if (h1=="\\neq") alpha <- alpha/2
tc
alpha
c0 <- paste("
\\(\\fbox{A}\\) FORMULAZIONE DELLE IPOTESI
$$\\begin{cases}
H_0:\\mu=\\mu_0=",mu0,"\\text{",um,"}\\\\
H_1:\\mu",h1," \\mu_0=",mu0,"\\text{",um,"}
\\end{cases}$$",
ifelse(h1=="\\neq","Siccome \\(H_1\\) è bilaterale, considereremo \\(\\alpha/2\\), anziché \\(\\alpha\\) $$ $$",""),
"\n\n \\(\\fbox{B}\\) SCELTA E CALCOLO STATISTICA-TEST, \\(Z\\)
\\(\\sigma^{2}\\) di \\(\\cal{P}\\) è nota: \\(\\Rightarrow\\) z-Test.
\\begin{eqnarray*}
\\frac{\\hat\\mu - \\mu_{0}} {\\sigma/\\sqrt{n}}&\\sim&N(0,1)\\\\
z_{\\text{obs}}
&=& \\frac{ (",muh,"- ",mu0,")} {",s,"/\\sqrt{",n,"}}
=  ",tobs,"\\, .
\\end{eqnarray*}"
)
tc <- round(tc,4)
H1 <- h1
if (h1=='\\neq') h1 <- ifelse(tc<0,"<",">")
c1 <- paste("\\(\\fbox{C}\\) DECISIONE
Dalle tavole si ha \\(z_{",alpha,"} = ",tc,"\\).
$$z_{\\text{obs}} = ",tobs,ifelse(tobs<tc,"<",">"), "z_{",alpha,"} = ",tc,"$$ ")
c1
runApp()
0^0
-1^0
runApp()
ztesp <- function(sn,n,p0,alpha = 0.05){
ph <- sn/n
se <- sqrt(p0*(1-p0)/n)
tobs <- (ph-p0)/se
if (h1==">") tc <- qnorm(1-alpha)
if (h1=="<") tc <- -qnorm(1-alpha)
if (h1=="\\neq") tc <- sign((ph-p0))*qnorm(1-alpha)
if (h1=="\\neq") alpha <- alpha/2
c0 <- paste("La stima
$$\hat\pi=\frac {", sn,"} {", n,"}=", ph," $$
source("~/OneDrive/Stat/Test/ztestp.R")
ztesp(10,30,.4)
source("~/OneDrive/Stat/Test/ztestp.R")
ztesp(10,30,.4)
source("~/OneDrive/Stat/Test/ztestp.R")
ztesp(10,30,.4)
cat(ztesp(10,30,.4))
cat(ztesp(100,300,.4))
source("~/OneDrive/Stat/Test/ztestp.R")
cat(ztesp(100,300,.4,h1 = "\\neq"))
runApp()
runApp()
runApp()
withMathJax(paste(ztestp(sn,n,pi0,h1)))
source("~/OneDrive/Stat/Test/ztestp.R")
runApp()
runApp()
source("~/OneDrive/Stat/Test/ztestp.R")
source("~/OneDrive/Stat/Test/ztestp.R")
runApp()
ztesp(sn <- 10,n <- 50, p0)
ztesp(sn <- 10,n <- 50, p0<-.4)
ztesp(sn <- 10,n <- 50, p0<-.4,h1)
cat(ztesp(sn <- 10,n <- 50, p0<-.4,h1))
withMathJax(paste(ztest_pi(sn = sn,n = n,p0 = pi0,h1 = h1)))
withMathJax(paste(ztest_pi(sn = sn,n = n,p0 = p0,h1 = h1)))
paste
withMathJax((ztest_pi(sn = sn,n = n,p0 = p0,h1 = h1)))
runApp()
runApp()
runApp()
source("~/OneDrive/Stat/Test/ttest.R")
ttest(10,sh = 1,n = 10,mu0 = 11,h1 = "\\neq")
cat(ttest(10,sh = 1,n = 10,mu0 = 11,h1 = "\\neq"))
runApp()
runApp()
ttest(muh = 10,sh = 1.2,n = 10,mu0 = 9,h1 = "\\neq")
cat(ttest(muh = 10,sh = 1.2,n = 10,mu0 = 9,h1 = "\\neq"))
runApp()
runApp()
runApp()
runApp()
withMathJax(ttest(muh = muh,sh = sh,n = n,mu0 = mu0,h1 = h1))
sh <-1.1
withMathJax(ttest(muh = muh,sh = sh,n = n,mu0 = mu0,h1 = h1))
runApp()
runApp()
runApp()
withMathJax(ttest(muh = muh,sh = sh,n = n,mu0 = mu0,h1 = h1))
withMathJax((ztest_pi(sn = sn,n = n,p0 = p0,h1 = h1)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ztest_mu(muh = 10,mu0 = 11,s = 1,n = 10,h1 = "\\neq")
cat(ztest_mu(muh = 10,mu0 = 11,s = 1,n = 10,h1 = "\\neq"))
cat(ttest(muh = 10,mu0 = 11,s = 1,n = 10,h1 = "\\neq"))
cat(ztest_pi(10,20,.6,"\\neq"))
runApp()
runApp()
runApp()
source("~/OneDrive/Stat/Test/ztestp.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(ztest_pi(10,20,.6,"\\neq"))
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/OneDrive/Stat/Test/ztestp.R")
ztest_pi(10,25,.5,"\\neq")
cat(ztest_pi(10,25,.5,"\\neq"))
runApp()
runApp()
runApp()
source("~/OneDrive/Stat/Test/ttest_2e.R")
ttest_2e(10,11,1,2)
source("~/OneDrive/Stat/Test/ttest_2e.R")
ttest_2e(10,11,1,2,10,14)
source("~/OneDrive/Stat/Test/ttest_2e.R")
ttest_2e(10,11,1,2,10,14)
source("~/OneDrive/Stat/Test/ttest_2e.R")
ttest_2e(10,11,1,2,10,14)
source("~/OneDrive/Stat/Test/ttest_2e.R")
ttest_2e(10,11,1,2,10,14)
cat(ttest_2e(10,11,1,2,10,14))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ttest_2e(10,11,1,2,n1 = 10,12)
source("~/OneDrive/Stat/Test/ztest2p.R")
runApp()
runApp()
runApp()
ztest2pi(30,50,20,40,h1)
h1
runApp()
ztest2pi(30,50,20,40,h1)
runApp()
ztest2pi(30,50,20,40,h1)
runApp()
runApp()
source("ztest2p.R")
ztest2pi(30,50,20,40,h1)
runApp()
runApp()
ttest_2e(mu1 = 10,mu2 = 11,s1h = 1,s2h = 2,n1 = 10,n2 = 20)
cat(ttest_2e(mu1 = 10,mu2 = 11,s1h = 1,s2h = 2,n1 = 10,n2 = 20))
ttest_2e <- function(mu1,mu2,s1h,s2h,n1,n2,h1="\\neq",alpha=0.05){
env <- new.env()
um <- ""
a <- "A"
b <- "B"
s1 <- sqrt(n1/(n1-1))*s1h
s2 <- sqrt(n2/(n2-1))*s2h
s2p <- (n1*s1h+n2*s2h)/(n1+n2-2)
se <- sqrt(s1^2/n1+s2^2/n2)
tobs <- (mu1-mu2)/se
if (h1==">") tc <- qt(1-alpha,n1+n2-2)
if (h1=="<") tc <- -qt(1-alpha,n1+n2-2)
if (h1=="\\neq") tc <- sign((mu1-mu2))*qt(1-alpha/2,n1+n2-2)
if (h1=="\\neq") alpha <- alpha/2
q1 <- a; q2 <- b
s2f1<- s1^2; s2f2 <- s2^2
nomi_variabili <- ls(envir = environment())
# Itera sui nomi delle variabili per arrotondare quelle numeriche
for (nome in nomi_variabili) {
valore <- get(nome, envir = environment())
if (is.numeric(valore)) {
# Arrotonda il valore e aggiornalo nell'ambiente della funzione
assign(nome, round(valore, digits = 4), envir = environment())
}
}
nomi_variabili <- ls(envir = environment())
# Itera sui nomi delle variabili per arrotondare quelle numeriche
for (nome in nomi_variabili) {
valore <- get(nome, envir = environment())
if (is.numeric(valore)) {
# Arrotonda il valore e aggiornalo nell'ambiente della funzione
assign(nome, round(valore, digits = 4), envir = environment())
}
}
c0 <- paste("
\\(\\fbox{A}\\) FORMULAZIONE DELLE IPOTESI
$$\\begin{cases}
H_0:\\mu_\\text{",a,"} =      \\mu_\\text{ ",b,"}\\text{",um,"}\\\\
H_1:\\mu_\\text{",a,"} ",h1," \\mu_\\text{ ",b,"}\\text{",um,"}
\\end{cases}$$
",ifelse(h1=="\\neq","Siccome \\(H_1\\) è bilaterale, considereremo \\(\\alpha/2\\), anziché \\(\\alpha\\) $$ $$"," "),"
\\(\\fbox{B}\\) SCELTA E CALCOLO STATISTICA-TEST, \\(T\\)
L'ipotesi è di eterogeneità e quindi calcoliamo:
$$
S^2_\\text{",a,"}=\\frac{n_\\text{",a,"}}{n_\\text{",a,"}-1}\\hat\\sigma^2_\\text{",a,"}=\\frac{",n1,"}{",n1,"-1}",s1h,"^2=",s2f1," \\qquad
S^2_\\text{",b,"}=\\frac{n_\\text{",b,"}}{n_\\text{",b,"}-1}\\hat\\sigma^2_\\text{",b,"}=\\frac{",n2,"}{",n2,"-1}",s2h,"^2=",s2f2,"
$$\n\n ")
c1 <- paste("\\begin{eqnarray*}
\\frac{\\hat\\mu_\\text{",a,"} - \\hat\\mu_\\text{",b,"}}
{\\sqrt{\\frac {S^2_\\text{",q1,"}}{n_\\text{",a,"}}+\\frac {S^2_\\text{",q2,"}}{n_\\text{",b,"}}}}&\\sim&t_{n_\\text{",a,"}+n_\\text{",b,"}-2}\\
t_{\\text{obs}}
&=& \\frac{ (",mu1,"- ",mu2,")} {\\sqrt{\\frac{",s2f1,"}{",n1,"}+\\frac{",s2f2,"}{",n2,"}}}
=  ",tobs,"\\, .
\\end{eqnarray*}
")
H1 <- h1
if (h1=='\\neq') h1 <- ifelse(tc<0,"<",">")
c2 <- paste("\\(\\fbox{C}\\) DECISIONE
Dalle tavole si ha \\(t_{(",n1,"+",n2,"-2);\\, ",alpha,"} = ",tc,"\\).
$$t_{\\text{obs}} = ",tobs," ",ifelse(tobs<tc,"<",">")," t_{",n1+n2-2,";\\, ",alpha,"} = ",tc,"$$
CONCLUSIONE: i dati ",ifelse(tobs<tc & h1=="<" | tobs>tc & h1==">", " **non** sono", "**sono**")," coerenti con \\(H_{0}\\) al LdS del ",ifelse(H1=="\\neq",2*alpha*100,alpha*100),"%
")
if (H1 == ">") {R <- c(tc,4); A <- c(-4,tc)}
if (H1 == "<") {R <- c(-4,tc); A <- c(tc,4)}
if (H1 == "\\neq") {A <- c(-abs(tc),abs(tc)); R1 <- c(-4,-abs(tc)); R <- c(4,abs(tc))}
curve(dt(x,n1+n2-2),-4,4,axes=F,xlab="T",ylab="")
lines(A,c(0,0),lwd=2,col=4)
if (H1 == "\\neq") {
lines(R1,c(0,0),lwd=2,col=2)
axis(1,c(-4,-tc,0,tc,4),round(c(-4,-tc,0,tc,4),3))
} else axis(1,round(c(-4,4,0,tc),3))
lines(R,c(0,0),lwd=2,col=2)
points(tobs,0,pch=4,cex=2)
text(tobs,.05,expression(t[obs]))
axis(2)
if (H1 == ">") {pval <- paste("P(T_{n1+n2-2}>t_{\\text{obs}})=P(T_{n1+n2-2}>",round(tobs,3),")=",format(1-pt(tobs,n1+n2-2),digits = 4, scipen=8))}
if (H1 == "<") {pval <- paste("P(T_{n1+n2-2}<t_{\\text{obs}})=P(T_{n1+n2-2}<",round(tobs,3),")=",format(pt(tobs,n1+n2-2),digits = 4, scipen=8))}
if (H1 == "\\neq") {pval <- paste("P(|T_{n1+n2-2}|>|t_{\\text{obs}}|)=2P(T_{n1+n2-2}>|t_{\\text{obs}}|)=2P(T_{n1+n2-2}>|",round(tobs,4),"|)=",format(2*pt(-abs(tobs),n1+n2-2),digits = 4, scipen=8))}
c3 <- paste("Il \\(p_{\\text{value}}\\) è
$$",pval,"$$")
return(paste(c0,c1,c2,c3,sep="\n\n"))
}
ttest_2e <- function(mu1,mu2,s1h,s2h,n1,n2,h1="\\neq",alpha=0.05){
env <- new.env()
um <- ""
a <- "A"
b <- "B"
s1 <- sqrt(n1/(n1-1))*s1h
s2 <- sqrt(n2/(n2-1))*s2h
s2p <- (n1*s1h+n2*s2h)/(n1+n2-2)
se <- sqrt(s1^2/n1+s2^2/n2)
tobs <- (mu1-mu2)/se
if (h1==">") tc <- qt(1-alpha,n1+n2-2)
if (h1=="<") tc <- -qt(1-alpha,n1+n2-2)
if (h1=="\\neq") tc <- sign((mu1-mu2))*qt(1-alpha/2,n1+n2-2)
if (h1=="\\neq") alpha <- alpha/2
q1 <- a; q2 <- b
s2f1<- s1^2; s2f2 <- s2^2
nomi_variabili <- ls(envir = environment())
# Itera sui nomi delle variabili per arrotondare quelle numeriche
for (nome in nomi_variabili) {
valore <- get(nome, envir = environment())
if (is.numeric(valore)) {
# Arrotonda il valore e aggiornalo nell'ambiente della funzione
assign(nome, round(valore, digits = 4), envir = environment())
}
}
nomi_variabili <- ls(envir = environment())
# Itera sui nomi delle variabili per arrotondare quelle numeriche
for (nome in nomi_variabili) {
valore <- get(nome, envir = environment())
if (is.numeric(valore)) {
# Arrotonda il valore e aggiornalo nell'ambiente della funzione
assign(nome, round(valore, digits = 4), envir = environment())
}
}
c0 <- paste("
\\(\\fbox{A}\\) FORMULAZIONE DELLE IPOTESI
$$\\begin{cases}
H_0:\\mu_\\text{",a,"} =      \\mu_\\text{ ",b,"}\\text{",um,"}\\\\
H_1:\\mu_\\text{",a,"} ",h1," \\mu_\\text{ ",b,"}\\text{",um,"}
\\end{cases}$$
",ifelse(h1=="\\neq","Siccome \\(H_1\\) è bilaterale, considereremo \\(\\alpha/2\\), anziché \\(\\alpha\\) $$ $$"," "),"
\\(\\fbox{B}\\) SCELTA E CALCOLO STATISTICA-TEST, \\(T\\)
L'ipotesi è di eterogeneità e quindi calcoliamo:
$$
S^2_\\text{",a,"}=\\frac{n_\\text{",a,"}}{n_\\text{",a,"}-1}\\hat\\sigma^2_\\text{",a,"}=\\frac{",n1,"}{",n1,"-1}",s1h,"^2=",s2f1," \\qquad
S^2_\\text{",b,"}=\\frac{n_\\text{",b,"}}{n_\\text{",b,"}-1}\\hat\\sigma^2_\\text{",b,"}=\\frac{",n2,"}{",n2,"-1}",s2h,"^2=",s2f2,"
$$\n\n ")
c1 <- paste("\\begin{eqnarray*}
\\frac{\\hat\\mu_\\text{",a,"} - \\hat\\mu_\\text{",b,"}}
{\\sqrt{\\frac {S^2_\\text{",q1,"}}{n_\\text{",a,"}}+\\frac {S^2_\\text{",q2,"}}{n_\\text{",b,"}}}}&\\sim&t_{n_\\text{",a,"}+n_\\text{",b,"}-2}\\
t_{\\text{obs}}
&=& \\frac{ (",mu1,"- ",mu2,")} {\\sqrt{\\frac{",s2f1,"}{",n1,"}+\\frac{",s2f2,"}{",n2,"}}}
=  ",tobs,"\\, .
\\end{eqnarray*}
")
H1 <- h1
if (h1=='\\neq') h1 <- ifelse(tc<0,"<",">")
c2 <- paste("\\(\\fbox{C}\\) DECISIONE
Dalle tavole si ha \\(t_{(",n1,"+",n2,"-2);\\, ",alpha,"} = ",tc,"\\).
$$t_{\\text{obs}} = ",tobs," ",ifelse(tobs<tc,"<",">")," t_{",n1+n2-2,";\\, ",alpha,"} = ",tc,"$$
CONCLUSIONE: i dati ",ifelse(tobs<tc & h1=="<" | tobs>tc & h1==">", " **non** sono", "**sono**")," coerenti con \\(H_{0}\\) al LdS del ",ifelse(H1=="\\neq",2*alpha*100,alpha*100),"%
")
if (H1 == ">") {R <- c(tc,4); A <- c(-4,tc)}
if (H1 == "<") {R <- c(-4,tc); A <- c(tc,4)}
if (H1 == "\\neq") {A <- c(-abs(tc),abs(tc)); R1 <- c(-4,-abs(tc)); R <- c(4,abs(tc))}
curve(dt(x,n1+n2-2),-4,4,axes=F,xlab="T",ylab="")
lines(A,c(0,0),lwd=2,col=4)
if (H1 == "\\neq") {
lines(R1,c(0,0),lwd=2,col=2)
axis(1,c(-4,-tc,0,tc,4),round(c(-4,-tc,0,tc,4),3))
} else axis(1,round(c(-4,4,0,tc),3))
lines(R,c(0,0),lwd=2,col=2)
points(tobs,0,pch=4,cex=2)
text(tobs,.05,expression(t[obs]))
axis(2)
if (H1 == ">") {pval <- paste("P(T_{n1+n2-2}>t_{\\text{obs}})=P(T_{n1+n2-2}>",round(tobs,3),")=",format(1-pt(tobs,n1+n2-2),digits = 4, scipen=8))}
if (H1 == "<") {pval <- paste("P(T_{n1+n2-2}<t_{\\text{obs}})=P(T_{n1+n2-2}<",round(tobs,3),")=",format(pt(tobs,n1+n2-2),digits = 4, scipen=8))}
if (H1 == "\\neq") {pval <- paste("P(|T_{n1+n2-2}|>|t_{\\text{obs}}|)=2P(T_{n1+n2-2}>|t_{\\text{obs}}|)=2P(T_{n1+n2-2}>|",round(tobs,4),"|)=",format(2*pt(-abs(tobs),n1+n2-2),digits = 4, scipen=8))}
c3 <- paste("Il \\(p_{\\text{value}}\\) è
$$",pval,"$$")
return(paste(c0,c1,c2,c3,sep="\n\n"))
}
runApp()
runApp()
source("ztest.R")
source("ztestp.R")
source("ttest.R")
source("ttest_2e.R")
source("ttest_2c.R")
source("ztest2p.R")
runApp()
runApp()
runApp()
list(0.05,0.01,0.005,0.001)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h1
b
bold
a
a("aaa")
br("aaa")
runApp()
strong(sono)
strong("sono")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ls()
devtools::install_github("ix-pat/src")
devtools::install_github("ix-pat/src/")
devtools::install_github("ix-pat/src")
devtools::install_github("ix-pat/src")
remotes::install_github("ix-pat/src")
runApp()
remotes::install_github("ix-pat/src")
devtools::install_github("ix-pat/src")
