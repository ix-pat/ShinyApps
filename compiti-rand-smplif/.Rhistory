content <- gsub(expression, as.character(result), content, fixed = TRUE)
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(str_split(content, "\n")[[1]], new_file_path)
return(new_file_path)
}
source("punti.R")
replace_expressions("2021.Rmd",punti_2021)
# Esempio di utilizzo
file_paths <- c("path/to/your_file1.Rmd", "path/to/your_file2.Rmd") # Sostituisci con i percorsi dei tuoi file Rmd
sapply(file_paths, replace_expressions)
replace_expressions("2021.Rmd",punti_2021)
debug(replace_expressions)
replace_expressions("2021.Rmd",punti_2021)
item2(T)
item2(T,T)
item2
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item2(T)
item2(new = T)
item2(start =  T)
item2(T,T)
# Funzione per sostituire le espressioni R con i risultati calcolati
replace_expressions <- function(file_path,punti) {
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item_start <- function(num = TRUE) item2(new = TRUE,start = TRUE,num = num)
item_      <- function(num = TRUE) item2(new = FALSE,start = FALSE,num = num)
item_next  <- function(num = TRUE) item2(new = TRUE,start = FALSE,num = num)
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
content <- readLines(file_path, warn = FALSE)
content <- paste(content, collapse = "\n")  # Unisci le righe in un'unica stringa
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
matches <- str_match_all(content, pattern)[[1]]
for (i in 1:nrow(matches)) {
expression <- matches[i,1]
argument <- matches[i,2]
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
ptt <- unlist(punti)[i]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
content <- gsub(expression, as.character(result), content, fixed = TRUE)
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(str_split(content, "\n")[[1]], new_file_path)
return(new_file_path)
}
source("punti.R")
replace_expressions("2021.Rmd",punti_2021)
debug(replace_expressions)
replace_expressions("2021.Rmd",punti_2021)
content <- readLines(file_path, warn = FALSE)
content
length(content)
content[1]
content[2]
content[15]
content[16]
content[17]
content[21]
content[210]
content[211]
matches
cont_
cont_ <- readLines(file_path, warn = FALSE)
i
content <- cont_[i]
content
matches <- str_match_all(content, pattern)[[1]]
matches
expression <- matches[i,1]
argument <- matches[i,2]
expression <- matches[1]
argument <- matches[2]
expression
argument
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
i <- 211
content <- cont_[i]
content
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
expression
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
}
#matches <- str_match_all(content, pattern)[[1]]
ii
#matches <- str_match_all(content, pattern)[[1]]
ii <- 1
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
ii <- ii + 1
}
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
content <- gsub(expression, as.character(result), content, fixed = TRUE)
}
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
cont_ <- readLines(file_path, warn = FALSE)
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
ii <- ii + 1
}
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
cont_ <- readLines(file_path, warn = FALSE)
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
cont_[211]
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(str_split(content, "\n")[[1]], new_file_path)
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(cont_, new_file_path)
replace_expressions("2022.Rmd",punti_2022)
# Funzione per sostituire le espressioni R con i risultati calcolati
replace_expressions <- function(file_path,punti) {
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item_start <- function(num = TRUE) item2(new = TRUE,start = TRUE,num = num)
item_      <- function(num = TRUE) item2(new = FALSE,start = FALSE,num = num)
item_next  <- function(num = TRUE) item2(new = TRUE,start = FALSE,num = num)
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
cont_ <- readLines(file_path, warn = FALSE)
#content <- paste(content, collapse = "\n")  # Unisci le righe in un'unica stringa
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(cont_, new_file_path)
return(new_file_path)
}
replace_expressions("2021.Rmd",punti_2021)
replace_expressions("2022.Rmd",punti_2022)
replace_expressions("2023.Rmd",punti_2023)
replace_expressions("2024.Rmd",punti_2024)
debug(replace_expressions)
replace_expressions("2024.Rmd",punti_2024)
# Funzione per sostituire le espressioni R con i risultati calcolati
replace_expressions <- function(file_path,punti) {
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item_start <- function(num = TRUE) item2(new = TRUE,start = TRUE,num = num)
item_      <- function(num = TRUE) item2(new = FALSE,start = FALSE,num = num)
item_next  <- function(num = TRUE) item2(new = TRUE,start = FALSE,num = num)
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
cont_ <- readLines(file_path, warn = FALSE)
#content <- paste(content, collapse = "\n")  # Unisci le righe in un'unica stringa
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T"|"nex=T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(cont_, new_file_path)
return(new_file_path)
}
replace_expressions("2024.Rmd",punti_2024)
# Funzione per sostituire le espressioni R con i risultati calcolati
replace_expressions <- function(file_path,punti) {
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item_start <- function(num = TRUE) item2(new = TRUE,start = TRUE,num = num)
item_      <- function(num = TRUE) item2(new = FALSE,start = FALSE,num = num)
item_next  <- function(num = TRUE) item2(new = TRUE,start = FALSE,num = num)
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
cont_ <- readLines(file_path, warn = FALSE)
#content <- paste(content, collapse = "\n")  # Unisci le righe in un'unica stringa
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T"|argument == "nex=T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(cont_, new_file_path)
return(new_file_path)
}
replace_expressions("2024.Rmd",punti_2024)
library(knitr)
library(stringr)
# Funzione per sostituire le espressioni R con i risultati calcolati
replace_expressions <- function(file_path,punti) {
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item_start <- function(num = TRUE) item2(new = TRUE,start = TRUE,num = num)
item_      <- function(num = TRUE) item2(new = FALSE,start = FALSE,num = num)
item_next  <- function(num = TRUE) item2(new = TRUE,start = FALSE,num = num)
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
cont_ <- readLines(file_path, warn = FALSE)
#content <- paste(content, collapse = "\n")  # Unisci le righe in un'unica stringa
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T"|argument == "nex=T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(cont_, file_path)
return(new_file_path)
}
source("punti.R")
replace_expressions("2021.Rmd",punti_2021)
replace_expressions("2022.Rmd",punti_2022)
replace_expressions("2023.Rmd",punti_2023)
replace_expressions("2024.Rmd",punti_2024)
# Esempio di utilizzo
# file_paths <- c("path/to/your_file1.Rmd", "path/to/your_file2.Rmd") # Sostituisci con i percorsi dei tuoi file Rmd
#
# sapply(file_paths, replace_expressions)
source("recupera-pat-book.R")
shiny::runApp()
reticulate::repl_python()
# Processo di generazione e compilazione dei documenti
reticulate::source_python("save_ex.py")
reticulate::source_python('Random-ex2.py')
# Assicurati di pulire l'ambiente in modo sicuro
rm(list=ls())
rmarkdown::render("compito_com.Rmd", output_file = "www/compito_com.html", envir = globalenv())
runApp()
source("punti.R")
library(knitr)
library(stringr)
# Funzione per sostituire le espressioni R con i risultati calcolati
replace_expressions <- function(file_path,punti) {
item2 <- function(new=FALSE,start=FALSE,num = FALSE){
sp <- "."
sp2 <- " "
if (!exists("i1")) assign("i1",1, envir = parent.frame())
if (!exists("i2")) assign("i2",1, envir = parent.frame())
if (start) assign("i1",0, envir = parent.frame())
if (new)   assign("i1",i1 + 1, envir = parent.frame())
if (new)   assign("i2",1, envir = parent.frame()) else assign("i2",i2 + 1, envir = parent.frame())
it <- (paste(i1,sp,ifelse(num,i2,letters[i2]),sp2,sep = ""))
return(it)}
item_start <- function(num = TRUE) item2(new = TRUE,start = TRUE,num = num)
item_      <- function(num = TRUE) item2(new = FALSE,start = FALSE,num = num)
item_next  <- function(num = TRUE) item2(new = TRUE,start = FALSE,num = num)
score <- 0
for (i in 1:length(punti)){
score <- c(score,unlist(punti[[i]]))
}
score <- score[-1]
cont_ <- readLines(file_path, warn = FALSE)
#content <- paste(content, collapse = "\n")  # Unisci le righe in un'unica stringa
# Trova tutte le espressioni `r punti_p(arg_opzionale)`
pattern <- "`r punti_p\\(([^)]*)\\)`"
#matches <- str_match_all(content, pattern)[[1]]
ii <- 0
for (i in 1:length(cont_)) {
content <- cont_[i]
matches <- str_match_all(content, pattern)[[1]]
expression <- matches[1]
argument <- matches[2]
if (!is.na(expression)){
it <- ifelse(argument =="start=T",item2(new = TRUE,start = TRUE),item2())
it <- ifelse(argument =="nex = T"|argument == "nex=T",item2(new = TRUE),it)
ii <- ii + 1
ptt <- unlist(punti)[ii]
result <- paste(it,"**(Punti ",ptt,")**",sep="")
# Sostituisci l'espressione con il risultato
cont_[i] <- gsub(expression, as.character(result), content, fixed = TRUE)
}
}
# Scrivi il nuovo contenuto in un nuovo file
new_file_path <- sub(".Rmd", "_processed.Rmd", file_path)
writeLines(cont_, file_path)
return(new_file_path)
}
source("punti.R")
replace_expressions("2021.Rmd",punti_2021)
replace_expressions("2022.Rmd",punti_2022)
replace_expressions("2023.Rmd",punti_2023)
replace_expressions("2024.Rmd",punti_2024)
# Esempio di utilizzo
# file_paths <- c("path/to/your_file1.Rmd", "path/to/your_file2.Rmd") # Sostituisci con i percorsi dei tuoi file Rmd
#
# sapply(file_paths, replace_expressions)
runApp()
reticulate::repl_python()
source("estrae-punti.R")
rm(list = ls())
source("recupera-pat-book.R")
source("punti.R")
source("estrae-punti.R")
reticulate::repl_python()
source_python("sposta-punti.py")
source_python("sposta-punt.py")
library(shiny)
library(reticulate)
source("recupera-pat-book.R")
source("punti.R")
source("estrae-punti.R")
source_python("sposta-punt.py")
runApp()
reticulate::repl_python()
rm(list=ls())
runApp()
reticulate::repl_python()
runApp()
runApp()
reticulate::repl_python()
runApp()
runApp()
runApp()
reticulate::repl_python()
runApp()
source_python("sposta-punt.py")
source_python("modifica_punt.py")
reticulate::source_python('~/OneDrive/Stat/App/compiti-rand/Random-ex2.py')
source("estrae-punti.R")
source_python("sposta-punt.py")
source_python("modifica_punt.py")
reticulate::source_python('~/OneDrive/Stat/App/compiti-rand/Random-ex2.py')
reticulate::source_python('~/OneDrive/Stat/App/compiti-rand/Random-ex2.py')
reticulate::repl_python()
runApp()
reticulate::repl_python()
