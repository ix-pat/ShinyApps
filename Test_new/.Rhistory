#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
#  scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
}
# Creazione delle mappe per tutti gli anni di espansione
maps <- lapply(names(nato_countries_by_year), create_nato_map)
# Mostra le mappe
maps[[1]]  # Mappa del 1949
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
geom_sf(aes()) +
#  scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# Carica i dati geografici
world <- ne_countries(scale = "medium", returnclass = "sf")
# Preparazione dei dati
nato_countries <- unlist(nato_countries_by_year[seq_len(match(year, names(nato_countries_by_year)))])
world$nato <- ifelse(world$iso_a2_eh %in% nato_countries, "NATO", "Non-NATO")
world$nato[world$geounit == "Russia"] <- "Russia"
world$nato[world$geounit == "Ukraine"] <- "Ukraine"
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
geom_sf(aes()) +
#  scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
geom_sf() +
#  scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
#  geom_sf() +
#  scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
#  geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
labs(title = paste("World Map with NATO and Russia in", year)) +
theme_minimal()
world
world[1,]
world$geometry[1]
# Funzione per creare mappe
create_nato_map <- function(year) {
# Carica i dati geografici
world <- ne_countries(scale = "medium", returnclass = "sf")
# Preparazione dei dati
nato_countries <- unlist(nato_countries_by_year[seq_len(match(year, names(nato_countries_by_year)))])
world$nato <- ifelse(world$iso_a2_eh %in% nato_countries, "NATO", "Non-NATO")
world$nato[world$geounit == "Russia"] <- "Russia"
world$nato[world$geounit == "Ukraine"] <- "Ukraine"
# # Creazione della mappa
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
labs(title = paste("World Map with NATO and Russia in", year)) +
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(crs = st_crs("+proj=eqc +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs"), xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
}
# Creazione delle mappe per tutti gli anni di espansione
maps <- lapply(names(nato_countries_by_year), create_nato_map)
# Mostra le mappe
maps[[1]]  # Mappa del 1949
# Carica i dati geografici
world <- ne_countries(scale = "medium", returnclass = "sf")
# Preparazione dei dati
nato_countries <- unlist(nato_countries_by_year[seq_len(match(year, names(nato_countries_by_year)))])
world$nato <- ifelse(world$iso_a2_eh %in% nato_countries, "NATO", "Non-NATO")
world$nato[world$geounit == "Russia"] <- "Russia"
world$nato[world$geounit == "Ukraine"] <- "Ukraine"
# # Creazione della mappa
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
labs(title = paste("World Map with NATO and Russia in", year)) +
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = NULL, ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
labs(title = paste("World Map with NATO and Russia in", year)) +
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(0,360), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,0), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(0,360), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,0), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-10,170), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()+
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,0), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
world$geometry[1]
class(world$geometry[1])
world$geometry[1][[1]]
world$geometry[1][[2]]
class(world$geometry[1][[1]])
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,0), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(20,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf() +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,20), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(20,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,20), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(50,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,50), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
# # Creazione della mappa
# ggplot(data = world) +
#   geom_sf(aes(fill = nato)) +
#   scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red","Ukraine" = "lightblue")) +
#   labs(title = paste("World Map with NATO and Russia in", year)) +
#   theme_minimal()
par(mfrow=c(1,2))
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(50,180), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
ggplot(data = world) +
geom_sf(aes(fill = nato)) +
scale_fill_manual(values = c("NATO" = "blue", "Non-NATO" = "grey", "Russia" = "red")) +
labs(title = "World Map with NATO and Russia") +
coord_sf(xlim = c(-180,50), ylim = NULL) +  # Proiezione equirettangolare centrata sulla Russia
theme_minimal()
library(maps)
# Dichiara il meridiano di riferimento per il "wrap"
meridian <- 150
# Disegna la mappa con il meridiano di riferimento spostato a 150 gradi Est
map("world", wrap = c(meridian - 180, meridian), fill = TRUE, col = "#D3D3D3", bg = "white")
library(maps)
# Dichiara il meridiano di riferimento per il "wrap"
meridian <- 150
# Disegna la mappa con il meridiano di riferimento spostato a 150 gradi Est
map("world", wrap = c(meridian - 180, meridian+180), fill = TRUE, col = "#D3D3D3", bg = "white")
library(maps)
# Dichiara il meridiano di riferimento per il "wrap"
meridian <- 150
# Disegna la mappa con il meridiano di riferimento spostato a 150 gradi Est
map("world", wrap = c(meridian - 180, meridian+180), fill = TRUE, col = "#D3D3D3", bg = "white")
library(maps)
# Dichiara il meridiano di riferimento per il "wrap"
meridian <- 150
# Disegna la mappa con il meridiano di riferimento spostato a 150 gradi Est
map("world", wrap = c(0, 360), fill = TRUE, col = "#D3D3D3", bg = "white")
library(maps)
# Dichiara il meridiano di riferimento per il "wrap"
meridian <- 150
# Disegna la mappa con il meridiano di riferimento spostato a 150 gradi Est
map("world", wrap = c(0, 360), fill = TRUE, col = "#D3D3D3", bg = "white")
map("world", fill = TRUE, col = "#D3D3D3", bg = "white")
map("world", fill = TRUE, col = "#D3D3D3", bg = "white",xlim=c(0,360),wrap = c(0,360))
long <- 150
lims <- c(long-180,long+180)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white",xlim=lims,wrap = lims)
long <- 50
lims <- c(long-180,long+180)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white",xlim=lims,wrap = lims)
long <- 80
lims <- c(long-180,long+180)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white",xlim=lims,wrap = lims)
library(maps)
# Definisci i paesi NATO per anno
nato_countries_by_year <- list(
"1949" = c("USA", "Canada", "Belgium", "Denmark", "France", "Iceland",
"Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "United Kingdom"),
"1952" = c("Greece", "Turkey"),
"1955" = c("Germany"),
"1982" = c("Spain"),
"1999" = c("Czech Republic", "Hungary", "Poland"),
"2004" = c("Bulgaria", "Estonia", "Latvia", "Lithuania", "Romania", "Slovakia", "Slovenia"),
"2009" = c("Albania", "Croatia"),
"2017" = c("Montenegro"),
"2020" = c("North Macedonia")
)
# Unisci tutti i paesi NATO in un unico vettore
all_nato_countries <- unique(unlist(nato_countries_by_year))
# Mappa base centrata su un meridiano arbitrario
long <- 80
lims <- c(long - 180, long + 180)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white", xlim = lims, wrap = lims)
# Colora i paesi della NATO
for(country in all_nato_countries) {
map("world", regions = country, fill = TRUE, col = "blue", add = TRUE, xlim = lims, wrap = lims)
}
# Mappa base centrata su un meridiano arbitrario
long <- 80
lims <- c(long - 180, long + 180)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white", xlim = lims, wrap = lims)
# Colora i paesi della NATO
for(country in all_nato_countries) {
map("world", regions = country, fill = TRUE, col = "blue", add = TRUE, xlim = lims, wrap = lims)
}
# Colora la Federazione Russa
map("world", regions = "Russia", fill = TRUE, col = "red", add = TRUE, xlim = lims, wrap = lims)
all_nato_countries
country
world
curve(1+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(x),add=T)
curve(x+sin(2*x)/2,add=T)
curve(x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(2*x)*2,add=T)
curve(x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(function(x)x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(2*x)*2,add=T)
curve(x+sin(20*x)*2,add=T)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(20*x^2)*2,add=T)
curve(x+sin(20*exp(x))*2,add=T)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(20*exp(x))*2,add=T)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(20*exp(x))*2,add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(20*(x))*exp(x),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(20*(x))*(x),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature")
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2)
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(0,5,ldw=c(2,1),col=c(2,1),legend = c("clima","meteo"))
legend(0,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
arrows(0,0,7,0)
arrows(0,0,6,0)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(0,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,6,0)
arrows(0,0,4,0)
arrows(0,0,5,0)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(0,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(1,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x)+cos(20*(x))*sqrt(x),add=T,n = 1001)
legend(1,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x)+cos(10*(x))*sqrt(x),add=T,n = 1001)
legend(1,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
curve(x+sin(20*(x)),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(1,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(.1,5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*sqrt(x),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*(x),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*(x^2),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-1,7))
curve(x+sin(20*(x))*(x^1.2),add=T,n = 1001)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.2),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.1),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,0,5,0)
arrows(0,0,0,7)
arrows(0,-2,5,-2)
arrows(0,-2,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.1),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,-2,5,-2)
arrows(0,-2,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.15),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,-2,5,-2)
arrows(0,-2,0,7)
curve(0+x,0,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.15),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(0,-2,5,-2)
arrows(0,-2,0,8)
curve(x+x^1.15,lty=2,add=T)
curve(x-x^1.15,lty=2,add=T)
curve(0+x,1,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.15),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(1,-2,5,-2)
arrows(1,-2,1,8)
curve(x+x^1.15,lty=2,add=T)
curve(x-x^1.15,lty=2,add=T)
curve(0+x,1,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-2,8))
curve(x+sin(20*(x))*(x^1.5),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(1,-2,5,-2)
arrows(1,-2,1,8)
curve(x+x^1.5,lty=2,add=T)
curve(x-x^1.5,lty=2,add=T)
curve(0+x,1,5,axes=F,xlab="Tempo",ylab = "Teperature",lwd=2,col=2,ylim=c(-5,13))
curve(x+sin(20*(x))*(x^1.5),add=T,n = 1001)
legend(.1,6.5,lwd=c(2,1),col=c(2,1),legend = c("clima","meteo"))
arrows(1,-2,5,-2)
arrows(1,-2,1,8)
curve(x+x^1.5,lty=2,add=T)
curve(x-x^1.5,lty=2,add=T)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white",xlim=lims,wrap = lims)
for (long in 0:360){
lims <- c(long-180,long+180)
map("world", fill = TRUE, col = "#D3D3D3", bg = "white",xlim=lims,wrap = lims)
}
getwd()
ls()
rm(list=ls())
library(pat.book)
detach("package:pat.book", unload = TRUE)
shiny::runApp('App/compiti-rand (copy)')
runApp('App/compiti-rand (copy)')
runApp('App/compiti-rand (copy)')
system("for i in {1..6}; do rm Esercizio_$i.Rmd; done")
system("rm Esercizio_[1-6].Rmd")
system("rm Esercizio_*.Rmd")
system("rm Esercizi_*.Rmd")
system("rm Esercizi_[1-6].Rmd")
system("rm Esercizi_*")
getwd()
setwd("~/OneDrive/Stat/App/compiti-rand (copy)")
system("rm Esercizi_*")
system("rm Esercizi_* compito_*")
runApp()
runApp()
runApp()
runApp()
shiny::p
runApp()
runApp()
runApp()
setwd("~/OneDrive/Stat/App/Test_new")
source("~/OneDrive/Stat/App/Test_new/recupera-pat-book.R")
reticulate::source_python('~/OneDrive/Stat/App/Test_new/cat2paste.py')
reticulate::repl_python()
