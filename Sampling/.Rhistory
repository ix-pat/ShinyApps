shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- rnorm(10,10,1)
round(mean(x),2)
round(mean(x^2),2)
round(mean(x^2),2)-round(mean(x),2)
round(mean(x^2),2)-round(mean(x),2)^2
round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
x <- rnorm(10,10,1) ; round(mean(x^2),2)-round(mean(x)^2,2)
shiny::runApp()
110.14	- 9.91^2
set.seed(1)
x
mean(x)
mean(x^2)
mean(x^2)-mean(x)^2
set.seed(1)
set.seed(1)
x <- rnorm(10,10,1)
mean(x)
mean(x^2)
runApp()
x <- matrix(rnorm(100,10,1),ncol = 10)
x
x <- matrix(rnorm(100*10,10,1),ncol = 10)
x
runApp()
dati[,2]
runApp()
runApp()
runApp()
binom.test(25,30)
tes <-binom.test(25,30)
tes$conf.int
headers <- c("Campione", "n", "k", "mx", "mx2")  # Personalizza queste intestazioni
dati <- data.frame(1:M,data_matrix)
names(dati) <- headers
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mixt <- function(x) 1/M*sum(dnorm(x,dati$media,dati$SD))
dati$media <- rnorm(10)
dati <- data.frame(1:10,10)
dati
dati <- data.frame(1:10,10,8,x<-rnorm(10),)
x
x <- rnorm(10)
dati <- data.frame(1:10,10,8,sum(x),sum(x^2))
dati
headers <- c("Campione", "n", "k", "sx", "sx2")  # Personalizza queste intestazioni
dati <- data.frame(1:M,data_matrix)
M <- 10
dati <- data.frame(1:M,data_matrix)
names(dati) <- headers
dati$pi_stimato <- dati$k/dati$n
dati$media <- dati$sx/dati$n
dati$SD <- sqrt(dati$sx2/dati$n-(dati$sx/dati$n)^2)
dati[,2] <- as.integer(dati[,2])
dati[,3] <- as.integer(dati[,3])
mixt <- function(x) 1/M*sum(dnorm(x,dati$media,dati$SD))
curve(mixt(x),from = min(dati$media)-4,to = max(dati$media)+4)
mixt
mix(2)
mixt(2)
mixt(2:4)
mixt <- function(x) sapply(x,function(x) 1/M*sum(dnorm(x,dati$media,dati$SD)))
curve(mixt(x),from = min(dati$media)-4,to = max(dati$media)+4)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hist(dati$media,breaks = ceiling(M/3))
hist(dati$media,breaks = ceiling(M/3),axes=F)
axis(1)
hist(dati$media,breaks = ceiling(M/3),axes=F,col="grey99")
hist(dati$media,breaks = ceiling(M/3),axes=F,col="grey99",xlab="Media del campione",title="Istogramma")
hist(dati$media,breaks = ceiling(M/3),axes=F,col="grey99",xlab="Media del campione",main = "Istogramma")
runApp()
runApp()
dati[nrig,c(1:3,6:8)]
nrig <- max((M-9),1):M
dati[nrig,c(1:3,6:8)]
rbind(dati[nrig,c(1:3,6:8)],c(
"Stat",sum(dati$n),sum(dati$k),sum(dati$n*dati$media),NULL
))
rbind(dati[nrig,c(1:3,6:8)],c(
"Stat",sum(dati$n),sum(dati$k),NULL,sum(dati$n*dati$media),NULL
))
c(
"Stat",sum(dati$n),sum(dati$k),NULL,sum(dati$n*dati$media),NULL
)
rbind(dati[nrig,c(1:3,6:8)],c(
"Stat",sum(dati$n),sum(dati$k),NA,sum(dati$n*dati$media),NA
))
runApp()
dati[M+1,]  <- c("Stat",sum(dati$n),sum(dati$k),NA,sum(dati$n*dati$media),NA)
dati[M+1,]  <- c("Stat",sum(dati$n),sum(dati$k),NA,NA,NA,sum(dati$n*dati$media),NA)
dati[M+1,]
dati$media
dati[nrig,c(1:3,6:8)]
runApp()
dati[M+1,]  <- list("Stat",sum(dati$n),sum(dati$k),NA,NA,NA,sum(dati$n*dati$media),NA)
dati[M+1,]
library(data.table)
new_row <- data.table("Stat",sum(dati$n),sum(dati$k),NA,NA,NA,sum(dati$n*dati$media),NA)
dati
new_row <- data.table(Campione="Stat",n=sum(dati$n),k=sum(dati$k),sn=NA,sx2=NA,pi_stimato=NA,media=sum(dati$n*dati$media),SD=NA)
new_row <- list(Campione="Stat",n=sum(dati$n),k=sum(dati$k),sn=NA,sx2=NA,pi_stimato=NA,media=sum(dati$n*dati$media),SD=NA)
dati$n
dati <- data.frame(1:10,10,8,sum(x),sum(x^2))
headers <- c("Campione", "n", "k", "sx", "sx2")  # Personalizza queste intestazioni
dati <- data.frame(1:M,data_matrix)
names(dati) <- headers
dati$pi_stimato <- dati$k/dati$n
dati$media <- dati$sx/dati$n
dati$SD <- round(sqrt(dati$sx2/dati$n-(dati$sx/dati$n)^2),3)
dati[,2] <- as.integer(dati[,2])
dati[,3] <- as.integer(dati[,3])
nrig <- max((M-9),1):(M+1)
new_row <- list(Campione="Stat",n=sum(dati$n),k=sum(dati$k),sn=NA,sx2=NA,pi_stimato=NA,media=sum(dati$n*dati$media),SD=NA)
dati[M+1,]  <- new_row
dati
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hist(dati$media,breaks = 10,axes=F,col="grey99",xlab="Media del campione",main = "Istogramma",ylab="frequenza")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
M
k
k <- 4
input_ids <- outer(1:M, 1:k, function(i, j) paste("value", i, j, sep = "_"))
input_ids
sapply(input_ids, function(x) input[[x]])
runApp()
runApp()
runApp()
runApp()
hist(dati$pi_stimato,breaks = (0:M)/M,axes=F,col="grey99",xlab="Percentuale del campione",main = "Istogramma",ylab="frequenza",xlim=c(0,1))
axis(1)
axis(2)
dati
axis(1,(0:M)/M)
axis(1,(0:M)/M-.5,(0:M)/M)
axis(1,(0:M)/M+.5,(0:M)/M)
hist(dati$pi_stimato,breaks = (0:M)/M,axes=F,col="grey99",xlab="Percentuale del campione",main = "Istogramma",ylab="frequenza",xlim=c(0,1))
axis(1,(0:M)/M+.5,(0:M)/M)
hist(dati$pi_stimato,breaks = (0:10)/10,axes=F,col="grey99",xlab="Percentuale del campione",main = "Istogramma",ylab="frequenza",xlim=c(0,1))
axis(1,(0:10)/10-.05,(0:10)/10)
hist(dati$pi_stimato,breaks = (0:10)/10,axes=F,col="grey99",xlab="Percentuale del campione",main = "Istogramma",ylab="frequenza",xlim=c(-.05,1.05))
axis(1,(0:10)/10-.05,(0:10)/10)
axis(2)
hist(dati$media,breaks = min(M,10),axes=F,col="grey99",xlab="Media del campione",main = "Istogramma",ylab="frequenza")
axis(1)
axis(2)
runApp()
dati$pi_stimato
runApp()
runApp()
runApp()
n
n <- 10
(0:10)/n-1/n
(0:10)/n-1/(2*n)
(0:(n+1))/n-1/(2*n)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
log(100)
log(10)
log(1)
sqrt(50)
runApp()
input_ids <- outer(1:M, 1:k, function(i, j) paste("value", i, j, sep = "_"))
input_ids
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dati$SD
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- matrix(rnorm(M*n,mu,sigma),nrow = M)
M
mu <- 10
sigma <- 1
x <- matrix(rnorm(M*n,mu,sigma),nrow = M)
x
x^2
M <- 7
x <- matrix(rnorm(M*n,mu,sigma),nrow = M)
x
runApp()
runApp()
runApp()
matrix(sample(1:N),ncol = 2)
N <- 10
n <- 2
matrix(sample(1:N),ncol = 2)
pos <- matrix(sample(1:N),ncol = 2)
pos
row.names(pos)
row.names(pos) <- 1:(N/2)
pos
pos <- matrix(sample(1:N),ncol = 2)
pos <- matrix(sample(1:N),ncol = 2)
pos <- cbind(1:(N/n),pos)
pos
pos <- matrix(sample(1:N),ncol = 2)
pos <- cbind(sample(1:(N/n)),pos)
pos
pos <- matrix(sample(1:N),ncol = 2)
pos <- cbind(sample(1:M),pos)
N <- 10
n <- 2
M <- N/n
pos <- matrix(sample(1:N),ncol = 2)
pos <- cbind(sample(1:M),pos)
po <- pos[order(pos[,2]),]
po
which(pos[,-1]==1)
pos[,-1]
which(pos[,-1]==9)
which(pos[,-1]==6)
which(pos[,-1]==8)
which(pos[,-1]==4)
which(pos[,-1]==4) %% 5
which(pos[,-1]==7) %% 5
pos <- expand.grid(1:M,1:n)
pos
pos <- cbind(1:N,expand.grid(sample(1:M),1:n))
pos
accapo
accapo <- '<div style="page-break-before: always;" />'
accapo
bx <- "$\\LARGE\\square$"
#bx <- "â–¡"
k <- 20
tab <- matrix(bx,nrow = 2,ncol = k)
tab <- cbind(c("COGNOME","NOME"),tab)
tab2<- matrix(bx,nrow = 2,ncol = k)
tab2 <- cbind(c("CDL","Matricola"),tab2)
tab2[1,7:(k+1)] <- NA
tab <- rbind(tab,tab2[2:1,])
kable((tab))%>%
column_spec(2:(k+1),width = "1mm",color = "lightgrey")%>%
kable_styling(full_width = T)
library(knitr)
library(xtable)
library(kableExtra)
kable((tab))%>%
column_spec(2:(k+1),width = "1mm",color = "lightgrey")%>%
kable_styling(full_width = T)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
N <- 100
n <- 10
M <- N/n
pos <- cbind(1:N,expand.grid(sample(1:M),1:n))
pos
table(pos[,2])
pos[,oder(pos[,2]),]
pos[,odrer(pos[,2]),]
pos[order(pos[,2]),]
shiny::runApp()
x
x.samp
x.samp <- matrix(rnorm(10*1000000),ncol=10)
xsquare <- apply(x.samp,1,function(x)sum(x^2))
x.samp <- matrix(rnorm(10*1000000,10,2.2),ncol=10)
xsquare <- apply(x.samp,1,function(x)sum(x^2))
hist(xsquare)
hist(xsquare,probability = TRUE)
