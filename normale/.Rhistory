} else if (it[1] >0 & it2[1]!=-Inf & it2[2] == Inf) {
title(
paste0(
"P(Z >",it[1],")=1-Φ(",it[1],")=1-",format(pnorm(it[1]),digits=5,nsmall=5),"=1-",format(pnorm(it[1]),digits=5,nsmall=5),")=",1-round(pnorm(it[1]),5)
)
)
}  else if (it[1] <0 & it2[1]!=-Inf & it2[2] == Inf) {
title(
paste0(
"P(Z >",it[1],")=1-(1-Φ(",-it[1],"))=1-(1-(",format(pnorm(it[1]),digits=5,nsmall=5),"))=",format(pnorm(it[1]),digits=5,nsmall=5),"="
)
)
}
if (graf=="dist"){
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
axis(1);axis(2)
curve(pnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,lwd=2,col=2)
segments(it,c(0,0),x1 = it,pnorm(it,mean = mu,sd = ss),lty=2)
segments(it,pnorm(it,mean = mu,sd = ss),mu-4*ss,pnorm(it,mean = mu,sd = ss),lty=2)
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[1],mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],code = 3)
text(mu-4*ss+1,mean(pnorm(it,mean = mu,sd = ss)),round(pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
if (it2[1]==-Inf){
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],mu-4*ss+.2,1,code = 3)
text(mu-4*ss+1,(1+pnorm(it2[2]))/2,round(1-pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
}
title(paste0("P(",it2[1],"< Z <",it2[2],")=",round(pnorm(it2[2])-pnorm(it2[1]),5)))
} else if(graf=="dens"){
curve(dnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="φ(z), densità di Z")
curve(dnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,type="h",col="grey")
axis(1);axis(2)
} else if(graf=="tab"){
colore1 <- ifelse(it[1]<0,3,5)
colore2 <- ifelse(it[2]<0,2,4)
big <- round(seq(0, 3.9, by = 0.1),1)
little <- round(seq(0, 0.09, by = 0.01),2)
norm_table <- outer(big, little, function(x,y) pnorm(x+y))
row.names(norm_table) <- format(big, digits=1)      # format() forces the digits we want
colnames(norm_table) <- format(little, digits=2)
int1 <- floor(abs(it[1])*10)/10
dec1 <- abs(it[1])-int1
int2 <- floor(abs(it[2])*10)/10
dec2 <- abs(it[2])-int2
inr1 <- which(big==round(int1,1))
inc1 <- which(little==round(dec1,2))
inr2 <- which(big==round(int2,1))
inc2 <- which(little==round(dec2,2))
ex <- expand.grid(little,big)
length(big)
i <- 40-(1:40)
j <- (1:10)
ij <- expand.grid(j,i)
plot(c(0,11),c(0,42),type="n",axes=F,xlab="",ylab="")
rect(0,(1:20)*2-.5,11,(1:20)*2+.5,col="grey90",border = NA)
text(ij[,1],ij[,2]+1,(format(pnorm(ex[,1]+ex[,2]),digits = 5)),cex = gc,adj = 0)
# Intestazioni
text(0,40:1,format((big),digits = 2),cex = gc,adj = c(0,.5))
text(1:10,42.5,format(little,digits = 2),cex = gc,adj=0)
abline(v=.5)
abline(h=41)
if (it2[2] != Inf){
text(inc2,40:1,format(pnorm(little[inc2]+big),digits = 5),col=colore2,cex = gc,adj = 0)
text(1:10,40-inr2+1,format(pnorm(little+big[inr2]),digits = 5),col=colore2,cex = gc,adj = 0)
}
if (it2[1] != -Inf){
text(inc1,40:1,format(pnorm(little[inc1]+big),digits = 5),col=colore1,cex = gc,adj = 0)
text(1:10,40-inr1+1,format(pnorm(little+big[inr1]),digits = 5),col=colore1,cex = gc,adj = 0)
}
if (it[2] >=0 & it2[1]==-Inf & it2[2] != Inf) {
title(paste0("Uso delle tavole statistiche, Φ(",it2[2],")=",format(pnorm(abs(it2[2])),digits=5,nsmall=5)  ))
} else if (it[2] <0 & it2[1]==-Inf & it2[2] != Inf) {
title(paste0("Uso delle tavole statistiche, Φ(",it[2],")=1-Φ(",-it2[2],")=1-",format(pnorm(-it[2]),digits=5,nsmall=5),"=",format(pnorm(it[2]),digits=5,nsmall=5)  ))
} else if (it[2] >=0 & it[1]>=0 & it2[1]!=-Inf & it2[2] != Inf) {
title(
paste0(
"P(",it[1],"< Z <",it[2],")=Φ(",it[2],")-Φ(",it2[1],")=",format(pnorm(it[2]),digits=5,nsmall=5),"-",format(pnorm(it2[1]),digits=5,nsmall=5),"=",round(pnorm(it[2]),5)-round(pnorm(it[1]),5)
)
)
} else if (it[1] <0 & it[2]<0 & it2[1]!=-Inf & it2[2] != Inf) {
title(
paste0(
"P(",it[1],"< Z <",it[2],")=(1-Φ(",-it[2],"))-(1-Φ(",-it[1],"))=(1-",format(pnorm(-it[2]),digits=5,nsmall=5),")-(1-",format(pnorm(-it[1]),digits=5,nsmall=5),")=",round(pnorm(it[2]),5)-round(pnorm(it[1]),5)
)
)
} else if (it[1] <0 & it[2]>=0  & it2[1]!=-Inf & it2[2] != Inf) {
title(
paste0(
"P(",it[1],"< Z <",it[2],")=Φ(",it[2],")=Φ(",it[2],")-(1-Φ(",-it[1],"))=",format(pnorm(it[2]),digits=5,nsmall=5),"-(1-",format(pnorm(-it[1]),digits=5,nsmall=5),")=",round(pnorm(it[2]),5)-round(pnorm(it[1]),5)
)
)
} else if (it[1] >0 & it2[1]!=-Inf & it2[2] == Inf) {
title(
paste0(
"P(Z >",it[1],")=1-Φ(",it[1],")=1-",format(pnorm(it[1]),digits=5,nsmall=5),"=1-",format(pnorm(it[1]),digits=5,nsmall=5),")=",1-round(pnorm(it[1]),5)
)
)
}  else if (it[1] <0 & it2[1]!=-Inf & it2[2] == Inf) {
title(
paste0(
"P(Z >",it[1],")=1-(1-Φ(",-it[1],"))=1-(1-(",format(pnorm(it[1]),digits=5,nsmall=5),"))=",format(pnorm(it[1]),digits=5,nsmall=5),"="
)
)
}
}
runApp()
runApp()
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/IdC')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
F_print
source("~/OneDrive/Stat/App/FdR_descrittiva/main-functions.R")
F_print
F_print <- function(x,verso="<",x2=0){
datp <- round(dat2,4)
if (verso == "<"){
j <- max(which(brk <= x))
if(j==1) {
cat("\\begin{eqnarray*}
\\%(X<",x,") &=&",x,"\\times h_1 \\\\
&=&",x,"\\times ",datp$hj[1],"\\\\
&=& ",F.int(x),"\\times(100) \\\\
\\#(X<",x,") &=&",F.int(x)*n,"
\\end{eqnarray*}")
} else {
cat("\\begin{eqnarray*}
\\%(X<",x,") &=& ",paste("f_{",1:(j-1),"}\\times 100",collapse="+"),"+(",x,"-",brk[j],")\\times h_{",j,"} \\\\
&=& ",paste("(",datp$fj[1:(j-1)],")\\times 100",collapse="+"),"+(",x-brk[j],")\\times ",datp$hj[j]," \\\\
&=& ",F.int(x),"\\times(100) \\\\
\\#(X<",x,") &=&",F.int(x)*n,"
\\end{eqnarray*}")
}
} else if (verso == ">") {
j <- min(which(brk >= x))
if(j==k+1) {
cat("\\begin{eqnarray*}
\\%(X>",x,") &=&(",brk[j],"-",x,")\\times h_1 \\\\
&=&",brk[j]-x,"\\times ",datp$hj[k],"\\\\
&=& ",1-F.int(x),"\\times(100)\\\\
\\#(X>",x,") &=&",(1-F.int(x))*n,"
\\end{eqnarray*}")
} else {
cat("\\begin{eqnarray*}
\\%(X>",x,") &=& (",brk[j],"-",x,")\\times h_{",j-1,"}+",paste("f_{",(j):(k),"}\\times 100",collapse="+"),"\\\\
&=& (",brk[j]-x,")\\times",datp$hj[j-1],"+",paste("(",datp$fj[(j):(k)],")\\times 100",collapse="+"), "\\\\
&=& ",1-F.int(x),"\\times(100)\\\\
\\#(X>",x,") &=&",(1-F.int(x))*n,"
\\end{eqnarray*}")
}
} else  {
j1 <- max(which(br1 <= x))
j2 <- min(which(br2 >= x2))
cat("\\begin{eqnarray*}
\\%(",x,"<X<",x2,") &=& (",brk[j1+1],"-",x,")\\times h_{",j1,"}+",paste("f_{",(j1+1):(j2-1),"}\\times 100",collapse="+"),"+(",x2,"-",brk[j2],")\\times h_{",j2-1,"} \\\\
&=& (",brk[j1+1]-x,")\\times ",datp$hj[j1],"+",paste("(",datp$fj[(j1+1):(j2-1)],")\\times 100",collapse="+"),"+(",x2-brk[j2],")\\times ",datp$hj[j2]," \\\\
&=& ",F.int(x2)-F.int(x),"\\times(100)\\\\
\\#(",x,"< X <",x2,") &=&",(F.int(x2)-F.int(x))*n,"
\\end{eqnarray*}")
}
}
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/OneDrive/Stat/App/normale/main-functions.R")
runApp()
runApp()
runApp()
runApp()
source("~/OneDrive/Stat/App/FdR_descrittiva/stat-base.R")
n_int(-1,1,0,1)
x1
x1 <- -1
x2 <- 1
mm <- 0
ss <- 1
withMathJax(paste("$$",norm_int(x1,x2,mm = mm,ss = ss),"$$"))
withMathJax(paste("$$",n_int(x1,x2,mm = mm,ss = ss),"$$"))
runApp()
paste("$$",n_int(x1,x2,mm = mm,ss = ss),"$$")
withMathJax(paste("$$",n_int(x1,x2,mm = mm,ss = ss),"$$"))
runApp()
runApp('~/OneDrive/Stat/App/FdR_descrittiva')
brk
brk <- 0:4
nnn <- c(1,2,3)
samp <- genera_dati(brk,nnn )
nnn <- 1:4
samp <- genera_dati(brk,nnn )
n
source("../src/stat-base.R")
dir()
dir("..")
dir("../..")
getwd()
source("../../src/stat-base.R")
F_print(.3)
n <- 100
F_print(.3)
source("../FdR_descrittiva/src/stat-base.R")
dir("..")
dir("../FdR_descrittiva")
source("../FdR_descrittiva/stat-base.R")
F_print(.3)
withMathJax(paste("$$",F_print(x = x,x2 = x2,verso = ""),"$$"))
x <- 1
withMathJax(paste("$$",F_print(x = x,x2 = x2,verso = ""),"$$"))
withMathJax(paste("$$",n_int(x1,x2,mm = mm,ss = ss),"$$"))
runApp()
runApp()
runApp()
runApp()
withMathJax(paste("$$",n_int(x1,x2,mm = mm,ss = ss),"$$"))
withMathJax(paste("$$",F_print(x = x,x2 = x2,verso = ""),"$$"))
source("~/OneDrive/Stat/App/normale/script.R")
runApp()
runApp()
withMathJax(paste("$$",n_int(x1,x2,mm = mm,ss = ss),"$$"))
withMathJax(paste("$$",F_print(x = x,x2 = x2,verso = ""),"$$"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(sss)
View(sss)
sss <- function(input,graf){
it <- input$it
gc <- input$gc
mu <- 0
ss <- 1
it2 <- it
if (round(it2[1])==-4)it2[1] <- -Inf
if (round(it[2])==4)it2[2] <- Inf
if (graf=="dist"){
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
axis(1);axis(2)
curve(pnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,lwd=2,col=2)
segments(it,c(0,0),x1 = it,pnorm(it,mean = mu,sd = ss),lty=2)
segments(it,pnorm(it,mean = mu,sd = ss),mu-4*ss,pnorm(it,mean = mu,sd = ss),lty=2)
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[1],mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],code = 3)
text(mu-4*ss+1,mean(pnorm(it,mean = mu,sd = ss)),round(pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
if (it2[1]==-Inf){
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],mu-4*ss+.2,1,code = 3)
text(mu-4*ss+1,(1+pnorm(it2[2]))/2,round(1-pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
}
title(paste0("P(",it2[1],"< Z <",it2[2],")=",round(pnorm(it2[2])-pnorm(it2[1]),5)))
} else if(graf=="dens"){
curve(dnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="φ(z), densità di Z")
curve(dnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,type="h",col="grey")
axis(1);axis(2)
} else if(graf=="tab"){
colore1 <- ifelse(it[1]<0,3,5)
colore2 <- ifelse(it[2]<0,2,4)
big <- round(seq(0, 3.9, by = 0.1),1)
little <- round(seq(0, 0.09, by = 0.01),2)
norm_table <- outer(big, little, function(x,y) pnorm(x+y))
row.names(norm_table) <- format(big, digits=1)      # format() forces the digits we want
colnames(norm_table) <- format(little, digits=2)
int1 <- floor(abs(it[1])*10)/10
dec1 <- abs(it[1])-int1
int2 <- floor(abs(it[2])*10)/10
dec2 <- abs(it[2])-int2
inr1 <- which(big==round(int1,1))
inc1 <- which(little==round(dec1,2))
inr2 <- which(big==round(int2,1))
inc2 <- which(little==round(dec2,2))
ex <- expand.grid(little,big)
length(big)
i <- 40-(1:40)
j <- (1:10)
ij <- expand.grid(j,i)
plot(c(0,11),c(0,42),type="n",axes=F,xlab="",ylab="")
rect(0,(1:20)*2-.5,11,(1:20)*2+.5,col="grey90",border = NA)
text(ij[,1],ij[,2]+1,(format(pnorm(ex[,1]+ex[,2]),digits = 5)),cex = gc,adj = 0)
# Intestazioni
text(0,40:1,format((big),digits = 2),cex = gc,adj = c(0,.5))
text(1:10,42.5,format(little,digits = 2),cex = gc,adj=0)
abline(v=.5)
abline(h=41)
if (it2[2] != Inf){
text(inc2,40:1,format(pnorm(little[inc2]+big),digits = 5),col=colore2,cex = gc,adj = 0)
text(1:10,40-inr2+1,format(pnorm(little+big[inr2]),digits = 5),col=colore2,cex = gc,adj = 0)
}
if (it2[1] != -Inf){
text(inc1,40:1,format(pnorm(little[inc1]+big),digits = 5),col=colore1,cex = gc,adj = 0)
text(1:10,40-inr1+1,format(pnorm(little+big[inr1]),digits = 5),col=colore1,cex = gc,adj = 0)
}
if (it[2] >=0 & it2[1]==-Inf & it2[2] != Inf) {
title(paste0("Uso delle tavole statistiche, Φ(",it2[2],")=",format(pnorm(abs(it2[2])),digits=5,nsmall=5)  ))
} else if (it[2] <0 & it2[1]==-Inf & it2[2] != Inf) {
title(paste0("Uso delle tavole statistiche, Φ(",it[2],")=1-Φ(",-it2[2],")=1-",format(pnorm(-it[2]),digits=5,nsmall=5),"=",format(pnorm(it[2]),digits=5,nsmall=5)  ))
} else if (it[2] >=0 & it[1]>=0 & it2[1]!=-Inf & it2[2] != Inf) {
title(
paste0(
"P(",it[1],"< Z <",it[2],")=Φ(",it[2],")-Φ(",it2[1],")=",format(pnorm(it[2]),digits=5,nsmall=5),"-",format(pnorm(it2[1]),digits=5,nsmall=5),"=",round(pnorm(it[2]),5)-round(pnorm(it[1]),5)
)
)
} else if (it[1] <0 & it[2]<0 & it2[1]!=-Inf & it2[2] != Inf) {
title(
paste0(
"P(",it[1],"< Z <",it[2],")=(1-Φ(",-it[2],"))-(1-Φ(",-it[1],"))=(1-",format(pnorm(-it[2]),digits=5,nsmall=5),")-(1-",format(pnorm(-it[1]),digits=5,nsmall=5),")=",round(pnorm(it[2]),5)-round(pnorm(it[1]),5)
)
)
} else if (it[1] <0 & it[2]>=0  & it2[1]!=-Inf & it2[2] != Inf) {
title(
paste0(
"P(",it[1],"< Z <",it[2],")=Φ(",it[2],")=Φ(",it[2],")-(1-Φ(",-it[1],"))=",format(pnorm(it[2]),digits=5,nsmall=5),"-(1-",format(pnorm(-it[1]),digits=5,nsmall=5),")=",round(pnorm(it[2]),5)-round(pnorm(it[1]),5)
)
)
} else if (it[1] >0 & it2[1]!=-Inf & it2[2] == Inf) {
title(
paste0(
"P(Z >",it[1],")=1-Φ(",it[1],")=1-",format(pnorm(it[1]),digits=5,nsmall=5),"=1-",format(pnorm(it[1]),digits=5,nsmall=5),")=",1-round(pnorm(it[1]),5)
)
)
}  else if (it[1] <0 & it2[1]!=-Inf & it2[2] == Inf) {
title(
paste0(
"P(Z >",it[1],")=1-(1-Φ(",-it[1],"))=1-(1-(",format(pnorm(it[1]),digits=5,nsmall=5),"))=",format(pnorm(-it[1]),digits=5,nsmall=5)
)
)
}
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
-4:4
-2 %in% -4:4
-2.2 %in% -4:4
runApp()
runApp()
runApp()
as.integer(-3.4)
x
x_big <- numeric(1e10)
x_big <- numeric(1e9)
rm(x_big)
gc()
round(2.453,2)
round(2.003,2)
mm <- 12385.45666
ss <- 1426.222456
minVal <- round(mm - 4 * sqrt(ss),2)
maxVal <- round(mm + 4 * sqrt(ss),2)
minVal
maxVal
runApp()
runApp()
runApp()
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
mu <- 123.235
ss <- 12.4465
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
axis(1);axis(2); axis(1,it,col.axis=2)
ifelse(it[1] %in% -4:4, it[1] <- as.integer(it[1]),it[1])
runApp()
runApp()
it
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
axis(1);axis(2); axis(1,it,col.axis=2)
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1);axis(2); axis(1,it[1],col.axis=2); axis(1,it[2],col.axis=2)
mu <- 0 ; ss <- 1
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
axis(1);axis(2); axis(1,it,col.axis=2)
axis(1);axis(2)
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
axis(1);axis(2)
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1);axis(2); axis(1,it[1],col.axis=2); axis(1,it[2],col.axis=2)
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1);axis(2); axis(1,it[1],col.axis=2); axis(1,it[2],col.axis=2)
curve(dnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="φ(z), densità di Z")
curve(dnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,type="h",col="grey")
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1);axis(2); axis(1,it[1],col.axis=2); axis(1,it[2],col.axis=2)
runApp()
runApp()
runApp()
runApp()
axis(1,-4:4);
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
curve(pnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,lwd=2,col=2)
segments(it,c(0,0),x1 = it,pnorm(it,mean = mu,sd = ss),lty=2)
segments(it,pnorm(it,mean = mu,sd = ss),mu-4*ss,pnorm(it,mean = mu,sd = ss),lty=2)
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[1],mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],code = 3)
text(mu-4*ss+1,mean(pnorm(it,mean = mu,sd = ss)),round(pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
if (it2[1]==-Inf){
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],mu-4*ss+.2,1,code = 3)
text(mu-4*ss+1,(1+pnorm(it2[2]))/2,round(1-pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
}
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1,-4:4);
axis(2,ff)
ff <- round(dnorm(it,mu,ss))
axis(2,ff)
ff
mu
ss
it
ff <- round(dnorm(it,mu,ss),4)
axis(2,ff)
ff <- round(pnorm(it,mu,ss),4)
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
curve(pnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,lwd=2,col=2)
segments(it,c(0,0),x1 = it,pnorm(it,mean = mu,sd = ss),lty=2)
segments(it,pnorm(it,mean = mu,sd = ss),mu-4*ss,pnorm(it,mean = mu,sd = ss),lty=2)
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[1],mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],code = 3)
text(mu-4*ss+1,mean(pnorm(it,mean = mu,sd = ss)),round(pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
if (it2[1]==-Inf){
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],mu-4*ss+.2,1,code = 3)
text(mu-4*ss+1,(1+pnorm(it2[2]))/2,round(1-pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
}
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1,-4:4);
axis(2,ff)
axis(2,ff,las=2)
axis(1,it[1],col.axis=2); axis(1,it[2],col.axis=2)
curve(pnorm(x,mean = mu,sd = ss),mu-4*ss,mu+4*ss,n=501,axes=F,xlab="z",ylab="Φ(z), Ripartizione di Z")
abline(1,0,lty=2)
curve(pnorm(x,mean = mu,sd = ss),it[1],it[2],n=501,add=T,lwd=2,col=2)
segments(it,c(0,0),x1 = it,pnorm(it,mean = mu,sd = ss),lty=2)
segments(it,pnorm(it,mean = mu,sd = ss),mu-5*ss,pnorm(it,mean = mu,sd = ss),lty=2)
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[1],mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],code = 3)
text(mu-4*ss+1,mean(pnorm(it,mean = mu,sd = ss)),round(pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
if (it2[1]==-Inf){
arrows(mu-4*ss+.2,pnorm(it,mean = mu,sd = ss)[2],mu-4*ss+.2,1,code = 3)
text(mu-4*ss+1,(1+pnorm(it2[2]))/2,round(1-pnorm(it2,mean = mu,sd = ss)[2]-pnorm(it2,mean = mu,sd = ss)[1],5),cex=2,col=4)
}
it[1] <- ifelse(it[1] %in% -4:4,as.integer(it[1]),it[1])
it[2] <-ifelse(it[2] %in% -4:4, as.integer(it[2]),it[2])
axis(1,-4:4);
axis(2,ff,las=2)
axis(2,c(0,ff,1),las=2)
axis(2,c(0,ff,1),las=2,col.axis=c(1,2,2,1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
